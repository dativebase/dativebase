================================================================================
  DativeBase = Dative + OLD on Docker Compose
================================================================================

.. contents::


Audience
================================================================================

This DativeBase environment is based on `Docker Compose`_ and is specifically
**designed for developers**. Compose can be used in a production environment
but that is beyond the scope of this recipe.


Requirements
================================================================================

Docker, Docker Compose, git and make.

It is beyond the scope of this document to explain how these dependencies are
installed in your computer. If you are using Ubuntu 16.04 the following commands
may work::

    $ sudo apt update
    $ sudo apt install -y build-essential python-dev git
    $ sudo pip install -U docker-compose

Install Docker Community Edition (CE) following `these instructions`_.


Docker and Linux
--------------------------------------------------------------------------------

To use Docker on Linux as a non-root user, add your user to the "docker" group
with something like::

    $ sudo usermod -aG docker <user>

Remember that you will have to log out and back in for this to take effect.

.. warning:: Adding a user to the "docker" group will grant the ability to run
   containers which can be used to obtain root privileges on the docker host.
   Refer to `docker daemon attack surface`_ for more information.


.. _installation:

Installation
================================================================================

Run these commands when starting from scratch::

    $ git submodule update --init --recursive
    $ make create-volumes
    $ docker-compose up -d --build
    $ make bootstrap
    $ make restart-dativebase-services

The ``make create-volumes`` command will create an external volume so that the
host machine can access the OLD store/ directory where user files (e.g., audio)
are stored.

- ``/tmp/dativebase-old-store``---the OLD store/ directory.


GNU make
--------------------------------------------------------------------------------

Make commands above, and any subsequent calls to it below can be reviewed using
the following command from the compose directory::

    $ make help


Web UIs
================================================================================

- Dative: http://127.0.0.1:61080/


Source code auto-reloading
================================================================================

The OLD is served by pserve and Waitress. We set up pserve with the `reload`_
setting enabled, meaning that the Waitress server will be restarted as soon as
code changes.

.. note:: What about audo-reloading of Dative?

To manually restart a component::

    $ docker-compose up -d --force-recreate --no-deps old

If you have added new dependencies or changes to the ``Dockerfile`` you should
also add the ``--build`` argument to the previous command in order to ensure
that the container is using the newest image, e.g.::

    $ docker-compose up -d --force-recreate --build --no-deps old


Logs
================================================================================

The logs of all component processes are (or should be) sent to stdout. This
makes it easier to aggregate the logs generated by all of the replicas that we
may be deploying of our services across the cluster.

Docker Compose aggregates the logs for us so you can see everything from one
place. Some examples::

    $ docker-compose logs -f
    $ docker-compose logs -f old
    $ docker-compose logs -f nginx old


Scaling
================================================================================

With Docker Compose we can run as many containers as we want for a service,
e.g. by default we only provision a single replica of the ``OLD`` service but
we could run more::

    $ docker-compose up -d --scale old=3

This would give us one service but three containers.


Ports
================================================================================

+-----------------------------------------+----------------+-------------+
| Service                                 | Container port | Host port   |
+=========================================+================+=============+
| mysql                                   | `tcp/3306`     | `tcp/61001` |
+-----------------------------------------+----------------+-------------+
| nginx > OLD                             | `tcp/80`       | `tcp/61080` |
+-----------------------------------------+----------------+-------------+
| nginx > Dative                          | `tcp/8000`     | `tcp/61081` |
+-----------------------------------------+----------------+-------------+


Tests
================================================================================

The ``Makefile`` includes many useful targets for testing. List them all with::

    $ make 2>&1 | grep test


Resetting the Environment
================================================================================

In many cases, as a tester or a developer, you will want to restart all of the
containers at once in order to make sure that the latest version of the images
are built. However, you will also want to avoid losing your data like the
database or the files in store/. If this is case, run the following command::

    $ docker-compose up -d --force-recreate --build

Additionally you may want to delete all the data including the stuff in the
external volumes::

    $ make flush

Both snippets can be combined or used separately.


Cleaning up
================================================================================

The most effective way is::

    $ docker-compose down --volumes

The above command will not delete the external volumes described in the
:ref:`installation` section of this document. You must delete the volumes
manually with::

    $ docker volume rm dativebase-old-store

Optionally you may also want to delete the directories on the host::

    $ rm -rf /tmp/dativebase-old-store


.. _`these insructions`: https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/
.. _`Docker Compose`: https://docs.docker.com/compose/reference/overview/
.. _`docker daemon attack surface`: https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface
.. _`reload`: https://docs.pylonsproject.org/projects/pyramid/en/latest/pscripts/pserve.html#cmdoption-pserve-reload
